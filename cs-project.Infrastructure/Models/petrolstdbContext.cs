// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace cs_project.Infrastructure.Models;

public partial class petrolstdbContext : DbContext
{
    public petrolstdbContext(DbContextOptions<petrolstdbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }

    public virtual DbSet<AuditLog> AuditLogs { get; set; }

    public virtual DbSet<CorrectionLog> CorrectionLogs { get; set; }

    public virtual DbSet<CustomerPayment> CustomerPayments { get; set; }

    public virtual DbSet<CustomerTransaction> CustomerTransactions { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<ExchangeRate> ExchangeRates { get; set; }

    public virtual DbSet<PricePolicy> PricePolicies { get; set; }

    public virtual DbSet<Pump> Pumps { get; set; }

    public virtual DbSet<Shift> Shifts { get; set; }

    public virtual DbSet<ShiftEmployee> ShiftEmployees { get; set; }

    public virtual DbSet<Station> Stations { get; set; }

    public virtual DbSet<StationFuelPrice> StationFuelPrices { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<SupplierInvoice> SupplierInvoices { get; set; }

    public virtual DbSet<SupplierInvoiceLine> SupplierInvoiceLines { get; set; }

    public virtual DbSet<SupplierPayment> SupplierPayments { get; set; }

    public virtual DbSet<SupplierPaymentApply> SupplierPaymentApplies { get; set; }

    public virtual DbSet<Tank> Tanks { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AspNetRole>(entity =>
        {
            entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedName] IS NOT NULL)");

            entity.Property(e => e.Name).HasMaxLength(256);
            entity.Property(e => e.NormalizedName).HasMaxLength(256);
        });

        modelBuilder.Entity<AspNetRoleClaim>(entity =>
        {
            entity.HasIndex(e => e.RoleId, "IX_AspNetRoleClaims_RoleId");

            entity.Property(e => e.RoleId).IsRequired();

            entity.HasOne(d => d.Role).WithMany(p => p.AspNetRoleClaims).HasForeignKey(d => d.RoleId);
        });

        modelBuilder.Entity<AspNetUser>(entity =>
        {
            entity.HasIndex(e => e.NormalizedEmail, "EmailIndex");

            entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedUserName] IS NOT NULL)");

            entity.Property(e => e.Email).HasMaxLength(256);
            entity.Property(e => e.NormalizedEmail).HasMaxLength(256);
            entity.Property(e => e.NormalizedUserName).HasMaxLength(256);
            entity.Property(e => e.UserName).HasMaxLength(256);

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "AspNetUserRole",
                    r => r.HasOne<AspNetRole>().WithMany().HasForeignKey("RoleId"),
                    l => l.HasOne<AspNetUser>().WithMany().HasForeignKey("UserId"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId");
                        j.ToTable("AspNetUserRoles");
                        j.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");
                    });
        });

        modelBuilder.Entity<AspNetUserClaim>(entity =>
        {
            entity.HasIndex(e => e.UserId, "IX_AspNetUserClaims_UserId");

            entity.Property(e => e.UserId).IsRequired();

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserClaims).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserLogin>(entity =>
        {
            entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

            entity.HasIndex(e => e.UserId, "IX_AspNetUserLogins_UserId");

            entity.Property(e => e.UserId).IsRequired();

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserLogins).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserToken>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserTokens).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AuditLog>(entity =>
        {
            entity.HasIndex(e => e.CorrelationId, "IX_AuditLogs_CorrelationId");

            entity.HasIndex(e => e.ModifiedAt, "IX_AuditLogs_ModifiedAt");

            entity.Property(e => e.Operation).IsRequired();
            entity.Property(e => e.TableName).IsRequired();
        });

        modelBuilder.Entity<CorrectionLog>(entity =>
        {
            entity.HasIndex(e => e.ApprovedById, "IX_CorrectionLogs_ApprovedById");

            entity.HasIndex(e => e.CreatedAtUtc, "IX_CorrectionLogs_CreatedAtUtc");

            entity.HasIndex(e => e.IsActive, "IX_CorrectionLogs_IsActive");

            entity.HasIndex(e => e.RequestedById, "IX_CorrectionLogs_RequestedById");

            entity.HasIndex(e => new { e.TargetTable, e.TargetId }, "IX_CorrectionLogs_TargetTable_TargetId");

            entity.Property(e => e.Reason).IsRequired();
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.TargetTable).IsRequired();

            entity.HasOne(d => d.ApprovedBy).WithMany(p => p.CorrectionLogApprovedBies).HasForeignKey(d => d.ApprovedById);

            entity.HasOne(d => d.RequestedBy).WithMany(p => p.CorrectionLogRequestedBies)
                .HasForeignKey(d => d.RequestedById)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<CustomerPayment>(entity =>
        {
            entity.ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("CustomerPaymentHistory", "dbo");
                        ttb
                            .HasPeriodStart("SysStartTime")
                            .HasColumnName("SysStartTime");
                        ttb
                            .HasPeriodEnd("SysEndTime")
                            .HasColumnName("SysEndTime");
                    }));

            entity.HasIndex(e => e.CreatedAtUtc, "IX_CustomerPayments_CreatedAtUtc");

            entity.HasIndex(e => e.CustomerTransactionId, "IX_CustomerPayments_CustomerTransactionId");

            entity.HasIndex(e => e.IsActive, "IX_CustomerPayments_IsActive");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.CustomerTransaction).WithMany(p => p.CustomerPayments).HasForeignKey(d => d.CustomerTransactionId);
        });

        modelBuilder.Entity<CustomerTransaction>(entity =>
        {
            entity.ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("CustomerTransactionHistory", "dbo");
                        ttb
                            .HasPeriodStart("SysStartTime")
                            .HasColumnName("SysStartTime");
                        ttb
                            .HasPeriodEnd("SysEndTime")
                            .HasColumnName("SysEndTime");
                    }));

            entity.HasIndex(e => e.CreatedAtUtc, "IX_CustomerTransactions_CreatedAtUtc");

            entity.HasIndex(e => e.IsActive, "IX_CustomerTransactions_IsActive");

            entity.HasIndex(e => e.PumpId, "IX_CustomerTransactions_PumpId");

            entity.HasIndex(e => e.StationFuelPriceId, "IX_CustomerTransactions_StationFuelPriceId");

            entity.Property(e => e.Liters).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.PricePerLiter).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Pump).WithMany(p => p.CustomerTransactions).HasForeignKey(d => d.PumpId);

            entity.HasOne(d => d.StationFuelPrice).WithMany(p => p.CustomerTransactions)
                .HasForeignKey(d => d.StationFuelPriceId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasIndex(e => e.CreatedAtUtc, "IX_Employees_CreatedAtUtc");

            entity.HasIndex(e => e.IsActive, "IX_Employees_IsActive");

            entity.HasIndex(e => e.StationId, "IX_Employees_StationId");

            entity.Property(e => e.FirstName).IsRequired();
            entity.Property(e => e.LastName).IsRequired();
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Station).WithMany(p => p.Employees).HasForeignKey(d => d.StationId);
        });

        modelBuilder.Entity<ExchangeRate>(entity =>
        {
            entity.HasIndex(e => new { e.BaseCurrency, e.QuoteCurrency, e.RetrievedAtUtc }, "IX_ExchangeRates_BaseCurrency_QuoteCurrency_RetrievedAtUtc");

            entity.HasIndex(e => e.CreatedAtUtc, "IX_ExchangeRates_CreatedAtUtc");

            entity.HasIndex(e => e.IsActive, "IX_ExchangeRates_IsActive");

            entity.Property(e => e.BaseCurrency)
                .IsRequired()
                .HasMaxLength(3);
            entity.Property(e => e.QuoteCurrency)
                .IsRequired()
                .HasMaxLength(3);
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<PricePolicy>(entity =>
        {
            entity.HasIndex(e => e.CreatedAtUtc, "IX_PricePolicies_CreatedAtUtc");

            entity.HasIndex(e => e.IsActive, "IX_PricePolicies_IsActive");

            entity.HasIndex(e => new { e.StationId, e.FuelType, e.EffectiveFromUtc, e.EffectiveToUtc, e.IsActive, e.Priority }, "IX_PricePolicies_StationId_FuelType_EffectiveFromUtc_EffectiveToUtc_IsActive_Priority");

            entity.Property(e => e.BaseUsdPrice).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MarginPct).HasColumnType("decimal(5, 4)");
            entity.Property(e => e.MarginRon).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.RoundingIncrement).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Station).WithMany(p => p.PricePolicies).HasForeignKey(d => d.StationId);
        });

        modelBuilder.Entity<Pump>(entity =>
        {
            entity.HasIndex(e => e.CreatedAtUtc, "IX_Pumps_CreatedAtUtc");

            entity.HasIndex(e => e.IsActive, "IX_Pumps_IsActive");

            entity.HasIndex(e => e.TankId, "IX_Pumps_TankId");

            entity.Property(e => e.CurrentVolume).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Tank).WithMany(p => p.Pumps).HasForeignKey(d => d.TankId);
        });

        modelBuilder.Entity<Shift>(entity =>
        {
            entity.HasIndex(e => e.CreatedAtUtc, "IX_Shifts_CreatedAtUtc");

            entity.HasIndex(e => e.IsActive, "IX_Shifts_IsActive");

            entity.HasIndex(e => e.StationId, "IX_Shifts_StationId");

            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.TotalSalesAmount).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Station).WithMany(p => p.Shifts).HasForeignKey(d => d.StationId);
        });

        modelBuilder.Entity<ShiftEmployee>(entity =>
        {
            entity.HasIndex(e => e.CreatedAtUtc, "IX_ShiftEmployees_CreatedAtUtc");

            entity.HasIndex(e => e.EmployeeId, "IX_ShiftEmployees_EmployeeId");

            entity.HasIndex(e => e.IsActive, "IX_ShiftEmployees_IsActive");

            entity.HasIndex(e => new { e.ShiftId, e.EmployeeId }, "IX_ShiftEmployees_ShiftId_EmployeeId").IsUnique();

            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Employee).WithMany(p => p.ShiftEmployees).HasForeignKey(d => d.EmployeeId);

            entity.HasOne(d => d.Shift).WithMany(p => p.ShiftEmployees).HasForeignKey(d => d.ShiftId);
        });

        modelBuilder.Entity<Station>(entity =>
        {
            entity.HasIndex(e => e.CreatedAtUtc, "IX_Stations_CreatedAtUtc");

            entity.HasIndex(e => e.IsActive, "IX_Stations_IsActive");

            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<StationFuelPrice>(entity =>
        {
            entity.ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("StationFuelPriceHistory", "dbo");
                        ttb
                            .HasPeriodStart("SysStartTime")
                            .HasColumnName("SysStartTime");
                        ttb
                            .HasPeriodEnd("SysEndTime")
                            .HasColumnName("SysEndTime");
                    }));

            entity.HasIndex(e => e.CreatedAtUtc, "IX_StationFuelPrices_CreatedAtUtc");

            entity.HasIndex(e => e.DerivedFromPolicyId, "IX_StationFuelPrices_DerivedFromPolicyId");

            entity.HasIndex(e => e.IsActive, "IX_StationFuelPrices_IsActive");

            entity.HasIndex(e => e.StationId, "IX_StationFuelPrices_StationId");

            entity.Property(e => e.CostRonUsed).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FxRateUsed).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.PriceRon).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.DerivedFromPolicy).WithMany(p => p.StationFuelPrices).HasForeignKey(d => d.DerivedFromPolicyId);

            entity.HasOne(d => d.Station).WithMany(p => p.StationFuelPrices).HasForeignKey(d => d.StationId);
        });

        modelBuilder.Entity<Supplier>(entity =>
        {
            entity.HasIndex(e => e.CreatedAtUtc, "IX_Suppliers_CreatedAtUtc");

            entity.HasIndex(e => e.IsActive, "IX_Suppliers_IsActive");

            entity.Property(e => e.CompanyName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<SupplierInvoice>(entity =>
        {
            entity.ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("SupplierInvoiceHistory", "dbo");
                        ttb
                            .HasPeriodStart("SysStartTime")
                            .HasColumnName("SysStartTime");
                        ttb
                            .HasPeriodEnd("SysEndTime")
                            .HasColumnName("SysEndTime");
                    }));

            entity.HasIndex(e => e.CreatedAtUtc, "IX_SupplierInvoices_CreatedAtUtc");

            entity.HasIndex(e => e.IsActive, "IX_SupplierInvoices_IsActive");

            entity.HasIndex(e => e.StationId, "IX_SupplierInvoices_StationId");

            entity.HasIndex(e => e.StationId1, "IX_SupplierInvoices_StationId1");

            entity.HasIndex(e => e.SupplierId, "IX_SupplierInvoices_SupplierId");

            entity.Property(e => e.Currency).IsRequired();
            entity.Property(e => e.FxToRon).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Station).WithMany(p => p.SupplierInvoiceStations).HasForeignKey(d => d.StationId);

            entity.HasOne(d => d.StationId1Navigation).WithMany(p => p.SupplierInvoiceStationId1Navigations).HasForeignKey(d => d.StationId1);

            entity.HasOne(d => d.Supplier).WithMany(p => p.SupplierInvoices).HasForeignKey(d => d.SupplierId);
        });

        modelBuilder.Entity<SupplierInvoiceLine>(entity =>
        {
            entity.ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("SupplierInvoiceLineHistory", "dbo");
                        ttb
                            .HasPeriodStart("SysStartTime")
                            .HasColumnName("SysStartTime");
                        ttb
                            .HasPeriodEnd("SysEndTime")
                            .HasColumnName("SysEndTime");
                    }));

            entity.HasIndex(e => e.CreatedAtUtc, "IX_SupplierInvoiceLines_CreatedAtUtc");

            entity.HasIndex(e => e.IsActive, "IX_SupplierInvoiceLines_IsActive");

            entity.HasIndex(e => e.SupplierInvoiceId, "IX_SupplierInvoiceLines_SupplierInvoiceId");

            entity.HasIndex(e => e.TankId, "IX_SupplierInvoiceLines_TankId");

            entity.Property(e => e.QuantityLiters).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.SupplierInvoice).WithMany(p => p.SupplierInvoiceLines)
                .HasForeignKey(d => d.SupplierInvoiceId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Tank).WithMany(p => p.SupplierInvoiceLines)
                .HasForeignKey(d => d.TankId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<SupplierPayment>(entity =>
        {
            entity.ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("SupplierPaymentHistory", "dbo");
                        ttb
                            .HasPeriodStart("SysStartTime")
                            .HasColumnName("SysStartTime");
                        ttb
                            .HasPeriodEnd("SysEndTime")
                            .HasColumnName("SysEndTime");
                    }));

            entity.HasIndex(e => e.CreatedAtUtc, "IX_SupplierPayments_CreatedAtUtc");

            entity.HasIndex(e => e.IsActive, "IX_SupplierPayments_IsActive");

            entity.HasIndex(e => e.SupplierId, "IX_SupplierPayments_SupplierId");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Supplier).WithMany(p => p.SupplierPayments).HasForeignKey(d => d.SupplierId);
        });

        modelBuilder.Entity<SupplierPaymentApply>(entity =>
        {
            entity.ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("SupplierPaymentApplyHistory", "dbo");
                        ttb
                            .HasPeriodStart("SysStartTime")
                            .HasColumnName("SysStartTime");
                        ttb
                            .HasPeriodEnd("SysEndTime")
                            .HasColumnName("SysEndTime");
                    }));

            entity.HasIndex(e => e.CreatedAtUtc, "IX_SupplierPaymentApplies_CreatedAtUtc");

            entity.HasIndex(e => e.IsActive, "IX_SupplierPaymentApplies_IsActive");

            entity.HasIndex(e => e.SupplierInvoiceId, "IX_SupplierPaymentApplies_SupplierInvoiceId");

            entity.HasIndex(e => e.SupplierPaymentId, "IX_SupplierPaymentApplies_SupplierPaymentId");

            entity.Property(e => e.AppliedAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.SupplierInvoice).WithMany(p => p.SupplierPaymentApplies).HasForeignKey(d => d.SupplierInvoiceId);

            entity.HasOne(d => d.SupplierPayment).WithMany(p => p.SupplierPaymentApplies)
                .HasForeignKey(d => d.SupplierPaymentId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Tank>(entity =>
        {
            entity.HasIndex(e => e.CreatedAtUtc, "IX_Tanks_CreatedAtUtc");

            entity.HasIndex(e => e.IsActive, "IX_Tanks_IsActive");

            entity.HasIndex(e => e.StationId, "IX_Tanks_StationId");

            entity.Property(e => e.CapacityLiters).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.CurrentVolumeLiters).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Station).WithMany(p => p.Tanks)
                .HasForeignKey(d => d.StationId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}